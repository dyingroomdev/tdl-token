import * as anchor from "@coral-xyz/anchor";
import { Program, AnchorProvider, Wallet } from "@coral-xyz/anchor";
import {
  Connection,
  PublicKey,
  Keypair,
  SystemProgram,
  SYSVAR_RENT_PUBKEY,
  clusterApiUrl,
  LAMPORTS_PER_SOL,
} from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  getOrCreateAssociatedTokenAccount,
  mintTo,
  getAccount as getSplAccount,
} from "@solana/spl-token";
import * as fs from "fs";
import * as path from "path";

// Load the IDL
const IDL = JSON.parse(
  fs.readFileSync(path.join(__dirname, "../target/idl/dollar_token.json"), "utf8")
);

// Configuration
const NETWORK = "devnet";
const PROGRAM_ID = new PublicKey("FtAWkh8vpT1DvULYhhtYZhYNuobPmeizR5kbmD4jMy48");

class DollarTokenClient {
  connection: Connection;
  provider: AnchorProvider;
  program: Program;
  payer: Keypair;

  constructor(payerKeypair?: Keypair) {
    this.connection = new Connection(clusterApiUrl(NETWORK), "confirmed");
    this.payer = payerKeypair || this.loadWallet();
    
    const wallet = new Wallet(this.payer);
    this.provider = new AnchorProvider(this.connection, wallet, {
      commitment: "confirmed",
    });
    
    this.program = new Program(IDL, PROGRAM_ID, this.provider);
  }

  private loadWallet(): Keypair {
    const walletPath = path.join(process.env.HOME!, ".config/solana/id.json");
    if (fs.existsSync(walletPath)) {
      const secretKey = JSON.parse(fs.readFileSync(walletPath, "utf8"));
      return Keypair.fromSecretKey(new Uint8Array(secretKey));
    }
    const newKeypair = Keypair.generate();
    console.log("Generated new keypair. Public key:", newKeypair.publicKey.toString());
    return newKeypair;
  }

  async requestAirdrop(publicKey: PublicKey, lamports: number = LAMPORTS_PER_SOL) {
    console.log("Requesting airdrop...");
    const signature = await this.connection.requestAirdrop(publicKey, lamports);
    await this.connection.confirmTransaction(signature);
    console.log("Airdrop successful");
  }

  async initializeToken(
    name: string = "Dollar Token",
    symbol: string = "TDL",
    uri: string = "https://raw.githubusercontent.com/example/metadata.json",
    decimals: number = 9
  ): Promise<{ mint: PublicKey; tokenInfo: PublicKey }> {
    console.log("Initializing Dollar Token...");

    const mintKeypair = Keypair.generate();
    
    const [tokenInfoPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_info"), mintKeypair.publicKey.toBuffer()],
      this.program.programId
    );

    const tx = await this.program.methods
      .initializeToken(name, symbol, uri, decimals)
      .accounts({
        authority: this.payer.publicKey,
        mint: mintKeypair.publicKey,
        tokenInfo: tokenInfoPda,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
        rent: SYSVAR_RENT_PUBKEY,
      })
      .signers([mintKeypair])
      .rpc();

    console.log("Initialize token transaction:", tx);
    console.log("Mint address:", mintKeypair.publicKey.toString());
    console.log("Token info PDA:", tokenInfoPda.toString());

    return { mint: mintKeypair.publicKey, tokenInfo: tokenInfoPda };
  }

  async mintTokens(
    mint: PublicKey,
    amount: number,
    decimals: number = 9
  ): Promise<string> {
    console.log(`Minting ${amount} tokens...`);

    const [tokenInfoPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("token_info"), mint.toBuffer()],
      this.program.programId
    );

    // Get or create associated token account
    const destinationAta = await getOrCreateAssociatedTokenAccount(
      this.connection,
      this.payer,
      mint,
      this.payer.publicKey
    );

    const mintAmount = new anchor.BN(amount * Math.pow(10, decimals));

    const tx = await this.program.methods
      .mintTokens(mintAmount)
      .accounts({
        authority: this.payer.publicKey,
        mint: mint,
        tokenInfo: tokenInfoPda,
        destination: destinationAta.address,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .rpc();

    console.log("Mint tokens transaction:", tx);
    return tx;
  }

  async getBalance(mint: PublicKey, owner?: PublicKey): Promise<number> {
    const ownerKey = owner || this.payer.publicKey;
    
    try {
      const tokenAccount = await getOrCreateAssociatedTokenAccount(
        this.connection,
        this.payer,
        mint,
        ownerKey
      );
      
      const accountInfo = await getSplAccount(this.connection, tokenAccount.address);
      return Number(accountInfo.amount) / Math.pow(10, 9);
    } catch {
      return 0;
    }
  }
}

// Main execution
async function main() {
  const client = new DollarTokenClient();

  try {
    // Check balance and request airdrop if needed
    const balance = await client.connection.getBalance(client.payer.publicKey);
    console.log(`Current SOL balance: ${balance / LAMPORTS_PER_SOL} SOL`);
    
    if (balance < 0.1 * LAMPORTS_PER_SOL) {
      console.log("Requesting airdrop...");
      await client.requestAirdrop(client.payer.publicKey);
    }

    // 1. Initialize Token
    console.log("\n🚀 Initializing Dollar Token...");
    const { mint, tokenInfo } = await client.initializeToken();

    // 2. Mint initial supply
    console.log("\n💰 Minting initial supply...");
    await client.mintTokens(mint, 100_000_000); // 100M tokens

    // 3. Check balance
    const tokenBalance = await client.getBalance(mint);
    console.log(`\n💼 Your token balance: ${tokenBalance.toLocaleString()} TDL`);

    // Save addresses
    const addresses = {
      programId: PROGRAM_ID.toString(),
      mint: mint.toString(),
      tokenInfo: tokenInfo.toString(),
      authority: client.payer.publicKey.toString(),
      network: NETWORK,
      deploymentDate: new Date().toISOString(),
      explorerUrl: `https://explorer.solana.com/address/${mint.toString()}?cluster=devnet`,
    };

    const outputPath = path.join(__dirname, "addresses.json");
    fs.writeFileSync(outputPath, JSON.stringify(addresses, null, 2));

    console.log("\n✅ All operations completed successfully!");
    console.log("📋 Important addresses saved to client/addresses.json");
    console.log("\nToken Details:");
    console.log(`  Mint: ${mint.toString()}`);
    console.log(`  Token Info: ${tokenInfo.toString()}`);
    console.log(`  Authority: ${client.payer.publicKey.toString()}`);
    console.log(`  Explorer: ${addresses.explorerUrl}`);

  } catch (error) {
    console.error("\n❌ Error:", error);
    if (error.logs) {
      console.error("Program logs:", error.logs);
    }
  }
}

// Run if this file is executed directly
if (require.main === module) {
  main().catch(console.error);
}

export default DollarTokenClient;